#! /usr/bin/env bash

# Constants
precommitfile=.git/hooks/pre-commit

# Parse arguments
parse() {
  [ $# -eq 0 ] && usage
  while [[ $# -gt 0 ]]; do
    case $1 in
    -h|--help) usage ;;
    -l) list ;;
    -u) _UNLOCK=1 ;;
    *) _commands="$_commands $1" ;;
    esac
    shift || true
  done
}

# Print usage
usage() {
  cat >&2 <<EOS
Usage: git lock-branch [options] <branch>
Options:
  -h,--help    Show this help and exit
  -u           Unlock
  -l           List current locks
EOS
  exit 1;
}

# List locked branches
list() {
  [ -f $precommitfile ] || exit 0
  grep -q git-lock-branch $precommitfile || exit 0
  grep GITLOCK_ $precommitfile | awk '{print substr($NF,9)}' | sort
  exit
}

# If hook script exists make sure it's bash
checkhook() {
  if [ -f "$precommitfile" ]; then
    head -n 1 $precommitfile | grep -q 'bash' || {
      echo Existing pre-commit script does not appear to be bash
      echo Unable to install
      exit 1
    }
  else
    stub
  fi
}

# If there is no existing pre-commit, then create it
stub() {
  echo "#! /usr/bin/env bash" > $precommitfile
  chmod +x $precommitfile
  echo Initialized pre-commit hook
}

# Initialize git-lock
init() {
  checkhook
  cat >> $precommitfile <<EOS

# git-lock-branch
declare -A lockedbranches # GITLOCKEDBRANCHES
branch=\$(git symbolic-ref --short HEAD)
if [ -n "\${lockedbranches[\$branch]}" ]; then
  echo "\$branch is locked"
  exit 1
fi
EOS
    echo Initialized git-lock-branch
}

# Unlock branch
unlock() {
  sed -i "/GITLOCK_$1/d" $precommitfile
  echo "$1 unlocked!"
  exit
}

# Lock branch
lock() {
  marker="GITLOCK_$1"
  grep -q "$marker" $precommitfile || {
    line="lockedbranches[$1]=1 # $marker"
    sed -i /GITLOCKEDBRANCHES/a"$line" $precommitfile
  }
  echo "$1 locked"
}

# Lock or unlock a branch
run() {
  set -- $_commands

  init

  if [ -n "$_UNLOCK" ]; then
    unlock $1
  else
    lock $1
  fi
}

parse "${@}"
run
