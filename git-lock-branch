#! /usr/bin/env bash

precommitfile=.git/hooks/pre-commit

# Parse commands and options
while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
  -h|--help)
    _HELP=1
    ;;
  -e)
    _ENDANGER=1
    ;;
  -l)
    _LIST=1
    ;;
  *)
    # Save unmatched arguments
    _commands="$_commands $key"
    ;;
  esac
  shift || true
done

set -- $_commands

_BRANCH="$1"

[ -z "$_BRANCH" -a -z "$_LIST" ] && _HELP=1

if [ "$_HELP" ]; then cat >&2 <<EOS
Usage: git lock-branch [options] <branch>
Options:
  -h,--help    Show this help and exit
  -e           Remove lock
  -l           List current locks
EOS
exit 1;
fi

# List rules in LIST mode
if [ -n "$_LIST" ]; then
  [ -f $precommitfile ] || exit 0
  grep -q git-lock-branch $precommitfile || exit 0
  grep GITLOCK_ $precommitfile | awk '{print substr($NF,9)}' | sort
  exit
fi

# If hook script exists make sure it's sh/bash
if [ -f "$precommitfile" ]; then
  head -n 1 $precommitfile | grep -q 'bash' || {
    echo Existing pre-commit script does not appear to be bash
    echo Unable to install
    exit 1
  }

# If there is no existing pre-commit, then create it
else
  echo "#! /usr/bin/env bash" > $precommitfile
  chmod +x $precommitfile
  echo Initialized pre-commit hook
fi

# Initialize git-lock if necessary
grep -q git-lock-branch $precommitfile || {
  cat >> $precommitfile <<EOS

# git-lock-branch
declare -A lockedbranches # GITLOCKEDBRANCHES
branch=\$(git rev-parse --abbrev-ref HEAD)
if [ -n "\${lockedbranches[\$branch]}" ]; then
  echo "\$branch is locked"
  exit 1
fi
EOS
  echo Initialized git-lock-branch
}

# Delete rules in ENDANGER mode
if [ -n "$_ENDANGER" ]; then
  sed -i "/GITLOCK_$_BRANCH/d" $precommitfile
  echo "Branch $_BRANCH is not locked!"
  exit
fi

# Add specified branch rule
marker="GITLOCK_$_BRANCH"
grep -q "$marker" $precommitfile || {
  line="lockedbranches[$_BRANCH]=1 # $marker"
  sed -i /GITLOCKEDBRANCHES/a"$line" $precommitfile
}
echo "$_BRANCH locked"
