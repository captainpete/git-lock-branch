#! /bin/sh

precommitfile=.git/hooks/pre-commit

# Parse commands and options
while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
  -h|--help)
    _HELP=1
    ;;
  -e)
    _ENDANGER=1
    ;;
  *)
    # Save unmatched arguments
    _commands="$_commands $key"
    ;;
  esac
  shift || true
done

set -- $_commands

_BRANCH="$1"

[ -z "$_BRANCH" ] && _HELP=1

if [ "$_HELP" ]; then cat >&2 <<EOS
Usage: git protect [options] <arg1[, arg2, ...]>
Options:
  -h,--help    Show this help and exit
  -e,          Remove protection
EOS
exit; fi

# If there is no existing pre-commit, then create it
if [ ! -f "$precommitfile" ]; then
cat > $precommitfile <<EOS
#! /bin/bash

branch=\$(git rev-parse --abbrev-ref HEAD)
EOS
chmod +x $precommitfile
echo Initialized pre-commit hook.
fi

# Delete rules in ENDANGER mode
if [ -n "$_ENDANGER" ]; then
  sed -i "/PROTECT_$_BRANCH/d" $precommitfile
  echo "Branch $_BRANCH is not protected!"
  exit
fi

# Add specified branch rule
grep -q "PROTECT_${_BRANCH}" $precommitfile && \
{
echo "Branch $_BRANCH already protected."
} || {
cat >> $precommitfile <<EOS
[ "\$branch" = "$_BRANCH" ] && echo "$_BRANCH is protected" && exit 1 # PROTECT_$_BRANCH
EOS
echo "Branch $_BRANCH now protected."
}
