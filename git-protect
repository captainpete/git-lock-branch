#! /bin/sh

precommitfile=.git/hooks/pre-commit

# Parse commands and options
while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
  -h|--help)
    _HELP=1
    ;;
  -e)
    _ENDANGER=1
    ;;
  -l)
    _LIST=1
    ;;
  *)
    # Save unmatched arguments
    _commands="$_commands $key"
    ;;
  esac
  shift || true
done

set -- $_commands

_BRANCH="$1"

[ -z "$_BRANCH" -a -z "$_LIST" ] && _HELP=1

if [ "$_HELP" ]; then cat >&2 <<EOS
Usage: git protect [options] <branch>
Options:
  -h,--help    Show this help and exit
  -e           Remove protection
  -l           List current protections
EOS
exit; fi

# List rules in LIST mode
if [ -n "$_LIST" ]; then
  grep GITPROTECT_ $precommitfile | awk '{print substr($NF,12)}'
  exit
fi

# If hook script exists make sure it's sh/bash
if [ -f "$precommitfile" ]; then
  head -n 1 $precommitfile | grep -q 'bash' || {
    echo Existing pre-commit script does not appear to be sh/bash
    echo Unable to install
    exit 1
  }

# If there is no existing pre-commit, then create it
else
  echo "#! /bin/bash" > $precommitfile
  chmod +x $precommitfile
  echo Initialized pre-commit hook.
fi

# Initialize git-protect if necessary
grep -q git-protect $precommitfile || {
  cat >> $precommitfile <<EOS

# git-protect
branch=\$(git rev-parse --abbrev-ref HEAD)
EOS
  echo Initialized git-protect
}

# List rules in LIST mode
if [ -n "$_LIST" ]; then
  grep GITPROTECT $precommitfile | awk '{print substr($NF,12)}'
  exit
fi

# Delete rules in ENDANGER mode
if [ -n "$_ENDANGER" ]; then
  sed -i "/GITPROTECT_$_BRANCH/d" $precommitfile
  echo "Branch $_BRANCH is not protected!"
  exit
fi

# Add specified branch rule
grep -q "GITPROTECT_${_BRANCH}" $precommitfile || {
cat >> $precommitfile <<EOS
[ "\$branch" = "$_BRANCH" ] && echo "\$branch is protected" && exit 1 # GITPROTECT_$_BRANCH
EOS
}
echo "$_BRANCH protected."
